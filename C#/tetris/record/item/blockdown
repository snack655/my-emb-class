using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Threading;

namespace ConsoleApp2
{
    class Program
    {
        
        static int count = 0;
        static byte[] num_byte = new byte[8] { 0x00, 0x38, 0x44, 0x04, 0x08, 0x10, 0x20, 0x7c };

        // byte[,]의 ,은 2차원이라는 것을 알리기 위해 필요한 것
        // ex) 3차원이라면? byte[,,]
        static byte[,] num_byte_2 = new byte[2, 8] {
                {0x00,0x38,0x44,0x04,0x08,0x10,0x20,0x7c},
                {0x00,0x38,0x44,0x04,0x18,0x04,0x44,0x38}
        };

        static byte[,] num_byte_3 = new byte[10, 8] {
            {0x00,0x38,0x44,0x4c,0x54,0x64,0x44,0x38},  //0
            {0x00,0x10,0x30,0x50,0x10,0x10,0x10,0x7c}, //1
            {0x00,0x38,0x44,0x04,0x08,0x10,0x20,0x7c}, //2
            {0x00,0x38,0x44,0x04,0x18,0x04,0x44,0x38}, //3
            {0x00,0x08,0x18,0x28,0x48,0x7c,0x08,0x08}, //4
            {0x00,0x7c,0x40,0x78,0x04,0x04,0x44,0x38}, //5
            {0x00,0x38,0x40,0x40,0x78,0x44,0x44,0x38}, //6
            {0x00,0x7c,0x04,0x08,0x10,0x20,0x20,0x20}, //7
            {0x00,0x38,0x44,0x44,0x38,0x44,0x44,0x38}, //8
            {0x00,0x38,0x44,0x44,0x3c,0x04,0x44,0x38}, //9
        };

        static byte[,] background = new byte[22, 12]
        {
            { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
            { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
        };

        static byte[,] block_L = new byte[4, 4]
        {
            {0, 0, 0, 0},
            {0, 1, 0, 0},
            {0, 1, 1, 1},
            {0, 0, 0, 0}
        };

        static int x = 3;
        static int y = 4;

        static void Main(string[] args)
        {

            ConsoleKeyInfo key_value;
            String ch;
            make_background();

            make_block();

            while (true)
            {
                if (Console.KeyAvailable)
                {

                    key_value = Console.ReadKey(true); // true를 넣어야 함 -> echo 기능
                    ch = key_value.Key.ToString();

                    if (ch == "A")
                    {
                        delete_block();
                        x--;
                        make_block();
                        // Console.WriteLine("a");
                    }
                    else if (ch == "D")
                    {
                        delete_block();
                        x++;
                        make_block();
                        //Console.WriteLine("d");
                    }
                    else if (ch == "S")
                    {
                        delete_block();
                        y++;
                        make_block();
                        //Console.WriteLine("s");
                    }
                }

                if(count >= 100)
                {
                    count = 0;

                    delete_block();
                    y++;
                    make_block();
                }


                Thread.Sleep(10);
                count++;
              
                //Thread.Sleep(1000);
                //delete_block();
                //y++;
            }
      
        }

        static void make_background()
        {
            int x_pos = 0;
            int y_pos = 0;
            for (int j = 0; j < 22; j++)
            {
                for (int i = 0; i < 12; i++)
                {
                    if (background[j, i] == 1)
                    {
                        Console.SetCursorPosition(i + x_pos, j + y_pos);
                        Console.Write("*");
                    }
                    else
                    {
                        Console.SetCursorPosition(i + x_pos, j + y_pos);
                        Console.Write("-");
                    }
                }
                Console.WriteLine();
            }
        }

        static void make_block()
        {
            for (int j = 0; j < 4; j++)
            {
                for (int i = 0; i < 4; i++)
                {
                    if (block_L[j, i] == 1)
                    {
                        Console.SetCursorPosition(i + x, j + y);
                        Console.Write("*");
                    }
                    else
                    {
                        Console.SetCursorPosition(i + x, j + y);
                        Console.Write("-");
                    }
                }
                Console.WriteLine();
            }
        }

        static void delete_block()
        {
            for (int j = 0; j < 4; j++)
            {
                for (int i = 0; i < 4; i++)
                {
                    if (block_L[j, i] == 1)
                    {
                        Console.SetCursorPosition(i + x, j + y);
                        Console.Write("-");
                    }
                    //else
                    //{
                    //    Console.SetCursorPosition(i + x, j + y);
                    //    Console.Write("-");
                    //}
                }
                Console.WriteLine();
            }
        }
    }
}